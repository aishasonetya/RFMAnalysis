# -*- coding: utf-8 -*-
"""DS33A_Aisha Sonetya_Final Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oOw-u_YSzjlkaRK6CQvJJhpav08xQC5K

#Ecommerce Business Transactions Dataset
###Link: https://www.kaggle.com/datasets/gabrielramos87/an-online-shop-business

## Data Understanding & Penentuan Goals

#### 1. Business Understanding

Sebuah perusahaan ingin memahami pola pembelian dan karakteristik pelanggan mereka berdasarkan data transaksi yang terjadi. Dengan menganalisis produk terlaris, periode penjualan tertinggi, serta pelanggan dengan kontribusi terbesar, perusahaan dapat menyusun strategi pemasaran dan pengelolaan stok yang lebih efektif untuk meningkatkan penjualan.

**Key Questions:**
- Produk apa yang paling sering dibeli?
- Siapa pelanggan dengan total pembelian tertinggi?
- Pada bulan apa penjualan paling tinggi terjadi?
- Berapa total penjualan (revenue) yang dihasilkan selama periode data?
- Apakah ada produk yang sering dibeli dalam kuantitas besar (bulk order)?
- Siapa segmen pelanggan yang paling menguntungkan?

#### 2. Data Dictionary
File `Sales_Transaction.csv` berisi berbagai kolom, masing-masing mewakili atribut yang berbeda dari data penjualan. Berikut adalah deskripsi singkat dari setiap kolom:

| Nama Kolom               | Deskripsi                                |
|--------------------------|------------------------------------------|
| TransactionNo              | Kode Unik setiap transaksi. Huruf C dalam kode artinya cancellation.   |
| Date                   | Tanggal setiap transaksi terjadi          |
| ProductNo                     | Kode Unik suatu produk                |
| Product            | Nama produk|
| Price                   | Harga produk per unit                  |
| Quantity             | Jumlah produk terjual                          |
| CustomerNo               | Kode unik pelanggan                    |
| Country                 | Negara tempat customer tinggal               |
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split

# Set the maximum number of columns and rows to display to a large number
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

df = pd.read_csv('Sales_Transaction.csv')
df.head()

df.describe()

df.info()

df.shape

df.isnull().sum()

df[df['CustomerNo'].isnull()]

"""Dataset transaksi ini mencerminkan aktivitas pembelian pelanggan, namun mengandung data pembatalan dan missing values pada CustomerNo. Ini menunjukkan perlunya proses pembersihan data sebelum masuk ke analisis utama.

## Data Cleaning

#### Handling Duplicates
"""

len(df.drop_duplicates())

len(df)

len(df.drop_duplicates())/len(df)

"""Melalui analisis tersebut, angka yang dihasilkan adalah >1 yang berarti terdapat duplikat pada data yang sedang digunakan. Untuk itu, diperlukan ada handling duplikat agar tidak memengaruhi analisis data kedepannya."""

df[df.duplicated()]

duplicates = df[df.duplicated(keep=False)].sort_values(by=["TransactionNo", "ProductName","Quantity"])
duplicates

df = df.drop_duplicates().reset_index(drop=True)

len(df.drop_duplicates())/len(df)

df.shape

"""#### Handling Missing Value"""

df.isnull().sum()

df.info()

df.columns

total_rows = len(df)
for column in df.columns:
    missing_count = df[column].isna().sum()
    missing_percentage = (missing_count / total_rows) * 100
    print(f"Column '{column}' Has {missing_count} missing values ({missing_percentage:.2f}%)")

"""Melalui hal tersebut, dapat dilihat bahwa kolom `CustomerNo` memiliki totaln 55 missing value atau setara dengan 0,01% dari total data dalam excel tersebut.

Karena `CustomerNo` merupakan hal yang cukup krusial untuk tracking kegiatan customer tersebut, data missing value akan dihilangkan.
"""

df = df.dropna(subset=['CustomerNo'])

df.isnull().sum()

df.shape

"""## Data Manipulation

#### Changing Data Type

Melalui part data understanding, dapat dilihat bahwa kolom date masih bertipe object. Maka dari itu, perlu adanya penyesuaian tipe data dengan mengubah object menjadi datetime.
"""

df['Date'] = pd.to_datetime(df['Date'])
df.info()

"""Selanjutnya, karena kolom CustomerNo merupakan kode unik pelanggan yang datanya itu tidak perlu untuk diubah, tipe data tersebut perlu diganti dari `float64` menjadi `object`"""

df['CustomerNo'] = df['CustomerNo'].astype('float64').astype('str')
df.info()

df['CustomerNo'] = df['CustomerNo'].apply(lambda x: str(int(float(x))) if pd.notnull(x) else '')
df.head()

"""#### Creating New Column

Karena transaction number itu digabung dengan kode cancellations, perlu adanya pemisahan kode dengan transaction number untuk mempermudah analisis kedepannya. Hal itu dilakukan dengan cara memisahkan kode dengan angka dan ditambah dengan kolom baru.
"""

df['Cancellation'] = df['TransactionNo'].str.extract(r'^([A-Za-z])')  # Ambil huruf di awal, kalau ada
df['Transaction_Number'] = df['TransactionNo'].str.extract(r'(\d+)$')         # Ambil angka di akhir
df.tail()

df['Cancellation'] = df['Cancellation'].fillna('NC')

df.head()

"""Untuk konteks, `fillna` digunakan agar memudahkan analisis kedepannya. Kode `NC` yang ditambahkan di dalam kolom cancellation menjelaskan bahwa customer tersebut tidak melakukan pembatalan atau `Not Cancellation (NC)`.

Kemudian agar data yang digunakan tidak terlalu banyak, kolom `TransactionNo` dihapus karena sudah digantikan dengan kolom `Transaction_Number`.
"""

df.drop(columns='TransactionNo', inplace=True)

df.head()

"""Lalu untuk mengetahui total pembelanjaan yang dilakukan oleh pelanggan, perlu adanya"""

df['Total_Price'] = df['Price'] * df['Quantity']
df.head()

df.tail()

df['Month'] = pd.to_datetime(df['Date']).dt.strftime('%b')
df.head()

df.tail()

"""## EDA

#### Checking Outlier
"""

import scipy.stats as stats

def check_plot(df, variable):
    # fungsi mengambil kerangka data (df) dan
    # variabel yang diminati sebagai argumen

    # tentukan ukuran gambar
    plt.figure(figsize=(16, 4))

    # histogram
    plt.subplot(1, 3, 1)
    sns.histplot(df[variable], bins=30)
    plt.title('Histogram')

    # plot Q-Q
    plt.subplot(1, 3, 2)
    stats.probplot(df[variable], dist="norm", plot=plt)
    plt.ylabel('Variable quantiles')

    # box plot
    plt.subplot(1, 3, 3)
    sns.boxplot(y=df[variable])
    plt.title('Boxplot')

    plt.show()

numeric_columns = df.select_dtypes(include=['number']).columns
numeric_columns

numeric_columns = df.select_dtypes(include=['number']).columns
for col in numeric_columns:
    check_plot(df, col)

"""Untuk outlier akan dibiarkan tetap ada guna kebutuhan analisis.

#### 1. Produk apa yang paling sering dibeli?
"""

top_products = df.groupby('ProductName')['Quantity'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(10,5))
sns.barplot(x=top_products.values, y=top_products.index, palette='viridis')
plt.title('Top 10 Produk dengan Jumlah Pembelian Tertinggi')
plt.xlabel('Total Quantity')
plt.ylabel('Product Name')
plt.tight_layout()
plt.show()

"""#### 2. Siapa pelanggan dengan total pembelian tertinggi?"""

top_customers = df[df['CustomerNo'].notnull()] \
    .groupby('CustomerNo')['Total_Price'] \
    .sum() \
    .sort_values(ascending=False) \
    .head(10)

plt.figure(figsize=(10,5))
sns.barplot(x=top_customers.values, y=top_customers.index, palette='rocket')
plt.title('Top 10 Customer dengan Total Pembelian Tertinggi')
plt.xlabel('Total Revenue')
plt.ylabel('Customer ID')
plt.tight_layout()
plt.show()

"""#### 3. Pada bulan apa penjualan paling tinggi terjadi?"""

monthly_sales = df.groupby('Month')['Total_Price'].sum().sort_values(ascending=False)

plt.figure(figsize=(10,5))
sns.barplot(x=monthly_sales.index, y=monthly_sales.values, palette='coolwarm')
plt.title('Total Penjualan per Bulan')
plt.xlabel('Month')
plt.ylabel('Total Revenue')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""#### 4. Berapa total penjualan (revenue) yang dihasilkan selama periode data?"""

total_revenue = df['Total_Price'].sum()
print(f"Total penjualan selama periode data adalah sebesar: Â£{total_revenue:,.2f}")

"""#### 5. Apakah ada produk yang sering dibeli dalam kuantitas besar?"""

bulk_order = df.groupby('ProductName')['Quantity'].mean().sort_values(ascending=False).head(10)

plt.figure(figsize=(10,5))
sns.barplot(x=bulk_order.values, y=bulk_order.index, palette='crest')
plt.title('Top Produk dengan Rata-rata Pembelian Terbanyak per Transaksi')
plt.xlabel('Average Quantity per Order')
plt.ylabel('Product Name')
plt.tight_layout()
plt.show()

"""#### 6. Siapa segmen pelanggan yang paling menguntungkan?

Untuk ini akan dilakukan di Power BI

## Save Data
"""

# export to csv
df.to_csv('Sales_Transaction.csv', index=False)

from google.colab import files
files.download('Sales_Transaction.csv')

